model = keras.Sequential([
        keras.layers.Flatten(input_shape=(res, res, res)),
        keras.layers.Dense(res*2, activation='relu'),
        keras.layers.Dense(res, activation='relu'),
        keras.layers.Dense(num_classes, activation='softmax')
    ])
model.compile(optimizer='adam',
      loss='sparse_categorical_crossentropy',
      metrics=['accuracy'])

validation_split = 0.1
verbosity = 2
epochs = 20

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy with res 24: 0.7787021398544312
Test accuracy with res 32: 0.777870237827301
Test accuracy with res 48: 0.777870237827301

================================================================================================================

model = keras.Sequential([
        keras.layers.Flatten(input_shape=(res, res, res)),
        keras.layers.Dense(res*2, activation='relu'),
        keras.layers.Dense(res, activation='relu'),
        keras.layers.Dense(num_classes, activation='softmax')
    ])
model.compile(optimizer='adam',
      loss='sparse_categorical_crossentropy',
      metrics=['accuracy'])

without validation_split
verbosity = 2
epochs = 20

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy width res 24: 0.8660565614700317
Test accuracy width res 32: 0.8660565614700317
Test accuracy width res 48: 0.8735440969467163

================================================================================================================

model = keras.Sequential([
        keras.layers.Flatten(input_shape=(res, res, res)),
        keras.layers.Dense(res*2, activation='relu'),
        keras.layers.Dense(res, activation='relu'),
        keras.layers.Dense(num_classes, activation='softmax')
    ])
model.compile(optimizer='adam',
      loss='sparse_categorical_crossentropy',
      metrics=['accuracy'])

without validation_split
verbosity = 0
epochs = 30

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy width res 24: 0.8693843483924866
Test accuracy width res 32: 0.8793677091598511
Test accuracy width res 48: 0.8635607361793518

================================================================================================================

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(res, res, res)),
    keras.layers.Dense(res*2, activation='relu'),
    keras.layers.Dense(res, activation='relu'),
    keras.layers.Dense(num_classes, activation='softmax')
])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate)
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
without validation_split
verbosity = 0
epochs = 30

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy width res 24: 0.8494176268577576
Test accuracy width res 32: 0.8594009876251221
Test accuracy width res 48: 0.8344426155090332

================================================================================================================

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(res, res, res)),
    keras.layers.Dense(res*2, activation='relu'),
    keras.layers.Dense(res, activation='relu'),
    keras.layers.Dense(num_classes, activation='softmax')
])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate)
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
without validation_split
verbosity = 0
epochs = 30

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy for 10 classes width res 24: 0.9112675786018372
Test accuracy for 10 classes width res 32: 0.908450722694397
Test accuracy for 10 classes width res 48: 0.9070422649383545

Test accuracy for 20 classes width res 24: 0.8527454137802124
Test accuracy for 20 classes width res 32: 0.8594009876251221
Test accuracy for 20 classes width res 48: 0.8510815501213074

Test accuracy for 30 classes width res 24: 0.7548179626464844
Test accuracy for 30 classes width res 32: 0.7740899324417114
Test accuracy for 30 classes width res 48: 0.7682012915611267

Test accuracy for 40 classes width res 24: 0.7115073204040527
Test accuracy for 40 classes width res 32: 0.7135332226753235
Test accuracy for 40 classes width res 48: 0.7029983997344971


================================================================================================================

75% of Training set
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(res, res, res)),
    keras.layers.Dense(res*2, activation='relu'),
    keras.layers.Dense(res, activation='relu'),
    keras.layers.Dense(num_classes, activation='softmax')
])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate)
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
without validation_split
verbosity = 0
epochs = 30

Flat + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy for 10 classes width res 24: 0.8999999761581421
Test accuracy for 10 classes width res 32: 0.9211267828941345
Test accuracy for 10 classes width res 48: 0.9126760363578796

Test accuracy for 20 classes width res 24: 0.8361064791679382
Test accuracy for 20 classes width res 32: 0.840266227722168
Test accuracy for 20 classes width res 48: 0.8410981893539429

Test accuracy for 30 classes width res 24: 0.7505353093147278
Test accuracy for 30 classes width res 32: 0.7532119750976562
Test accuracy for 30 classes width res 48: 0.7473233342170715

Test accuracy for 40 classes width res 24: 0.6977309584617615
Test accuracy for 40 classes width res 32: 0.6774716377258301
Test accuracy for 40 classes width res 48: 0.7038087248802185

================================================================================================================

model = keras.Sequential([
    keras.layers.Conv3D(
            res, 
            kernel_size=(3), 
            activation='relu', 
            kernel_initializer='he_uniform', 
            data_format="channels_last",
            input_shape=(res, res, res, num_classes)
        ),        
    keras.layers.MaxPooling3D(pool_size=(2, 2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(res, activation='relu'),
    keras.layers.Dense(num_classes, activation='softmax')
    ])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate),
          loss='sparse_categorical_crossentropy',
          metrics=['accuracy'])
              
without validation_split
verbosity = 0
epochs = 30

Conv3D + MaxPooling3D + Flatten + Dense(2*res) + Dense(res) + Dense(num_classes)

Test accuracy for 10 classes width res 24: 0.9014084339141846
Test accuracy for 20 classes width res 24: 0.7479201555252075
Test accuracy for 30 classes width res 24: 0.7505353093147278

================================================================================================================
model = keras.Sequential([
        keras.layers.Flatten(input_shape=(res, res, res)),
        keras.layers.Dense(res*2, activation='relu'),
        keras.layers.Dense(res/2, activation='relu'),
        keras.layers.Dense(40, activation='softmax')
    ])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

Test accuracy for 10 classes width res 24: 0.891549289226532
Confusion Matrix
[[97  0  3  0  0  0  0  0  0  0]
 [ 1 36 10  0  0  0  1  2  0  0]
 [ 0  1 97  1  0  0  0  1  0  0]
 [ 2  0  1 14  1  0  0  0  2  0]
 [ 0  0  0  0 94  4  0  0  2  0]
 [ 4  0  0  0  3 90  0  0  2  1]
 [ 2  0  0  3  0  0 11  4  0  0]
 [ 7  0  1  3  0  0  0 87  0  2]
 [ 1  0  2  0  2  0  0  0 95  0]
 [ 0  0  2  1  2  2  0  1  0 12]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.85      0.97      0.91       100
     bathtub       0.97      0.72      0.83        50
         bed       0.84      0.97      0.90       100
       bench       0.64      0.70      0.67        20
   bookshelf       0.92      0.94      0.93       100
      bottle       0.94      0.90      0.92       100
        bowl       0.92      0.55      0.69        20
         car       0.92      0.87      0.89       100
       chair       0.94      0.95      0.95       100
        cone       0.80      0.60      0.69        20

    accuracy                           0.89       710
   macro avg       0.87      0.82      0.84       710
weighted avg       0.90      0.89      0.89       710

Test accuracy for 20 classes width res 24: 0.8386023044586182
Confusion Matrix
[[95  0  2  0  0  0  0  0  0  0  0  0  0  0  0  0  0  3  0  0]
 [ 1 38  6  1  0  0  1  1  0  0  0  0  0  0  0  0  2  0  0  0]
 [ 0  1 95  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  2  0]
 [ 1  0  0 15  1  0  1  0  0  0  0  0  0  0  0  0  0  2  0  0]
 [ 0  0  0  0 89  4  0  0  1  0  0  1  0  4  0  0  1  0  0  0]
 [ 0  0  0  0  7 80  0  0  1  4  0  2  0  0  0  1  0  5  0  0]
 [ 0  0  0  0  0  0 10  4  0  0  1  0  0  0  0  0  1  4  0  0]
 [ 3  0  2  0  0  0  0 88  0  0  0  0  0  0  0  0  3  2  1  1]
 [ 0  0  1  0  0  0  1  0 93  2  0  0  0  0  0  2  0  1  0  0]
 [ 0  0  2  0  1  1  0  0  0 15  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  1  2  0  0  0  3  0  0  0  0 13  0  1  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0 12  0  6  0  0  1  0  0  0]
 [ 0  0  5  1  0  1  0  0  0  0  0  0 73  1  5  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  2  0 17  0  1  0  0  0  0]
 [ 0  0  1  0  1  0  0  0  0  0  0  0  3  0 78  3  0  0  0  0]
 [ 1  0  0  0  1  4  0  1  0  1  0  0  0  0  1  8  1  0  0  2]
 [ 0  0  1  0  1  1  1  0  1  0  1  0  1  0  0  0 93  0  0  0]
 [ 7  0  1  1  0  0  0  2  0  0  0  1  0  0  0  0  0 79  9  0]
 [ 1  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1 16  0]
 [ 0  0  0  0  2  2  0  0  0  0  0  1  0  1  0  3  0  0  0 11]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.87      0.95      0.91       100
     bathtub       0.97      0.76      0.85        50
         bed       0.81      0.95      0.88       100
       bench       0.83      0.75      0.79        20
   bookshelf       0.86      0.89      0.87       100
      bottle       0.85      0.80      0.82       100
        bowl       0.62      0.50      0.56        20
         car       0.91      0.88      0.89       100
       chair       0.95      0.93      0.94       100
        cone       0.68      0.75      0.71        20
         cup       0.60      0.15      0.24        20
     curtain       0.63      0.60      0.62        20
        desk       0.95      0.85      0.90        86
        door       0.59      0.85      0.69        20
     dresser       0.93      0.91      0.92        86
  flower_pot       0.26      0.40      0.31        20
   glass_box       0.90      0.93      0.92       100
      guitar       0.81      0.79      0.80       100
    keyboard       0.57      0.80      0.67        20
        lamp       0.79      0.55      0.65        20

    accuracy                           0.84      1202
   macro avg       0.77      0.75      0.75      1202
weighted avg       0.85      0.84      0.84      1202

Test accuracy for 30 classes width res 24: 0.7221627235412598
Confusion Matrix
[[94  0  2  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  3  0  0  0  0  0  0  0  0  0  0  0]
 [ 0 36  2  0  0  0  1  2  1  0  0  0  0  0  0  0  4  0  1  0  0  0  0  0  0  0  0  3  0  0]
 [ 0  1 93  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  3  0  1  0  0  0  0  0  0  0  0  0]
 [ 1  0  0 11  1  0  0  0  1  0  0  0  0  0  0  0  2  0  1  0  0  1  1  0  0  1  0  0  0  0]
 [ 0  0  0  0 87  2  0  0  1  0  0  2  0  4  0  1  0  0  0  1  0  0  0  0  0  0  1  1  0  0]
 [ 1  0  0  0  5 72  0  0  1  2  0  0  0  0  0  3  0  0  3  4  2  0  0  1  0  0  5  1  0  0]
 [ 1  0  2  2  0  0  4  1  2  0  0  0  0  0  0  0  1  0  4  0  1  0  0  0  0  0  0  0  0  2]
 [ 2  0  2  6  0  0  0 77  1  0  0  0  0  0  0  0  4  0  4  0  0  0  0  0  0  1  0  0  0  3]
 [ 0  0  2  0  0  0  0  0 91  0  0  0  0  0  0  1  0  0  1  1  1  0  0  0  0  1  0  0  0  2]
 [ 0  0  4  0  0  1  0  0  0 11  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  4  0  0  0]
 [ 0  0  0  1  1  1  1  0  0  0  1  0  0  0  0  4  0  0  1  0  0  0  0  0  0  1  8  0  1  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  9  0  5  0  0  0  0  0  0  0  0  4  0  0  1  0  0  0  0]
 [ 1  0  6  0  0  0  0  1  1  0  0  0 60  0  3  0  1  0  0  0  0  0  1  6  0  4  1  0  0  1]
 [ 0  0  0  0  0  1  0  0  0  0  0  3  0 16  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  1  2  0  0  0  0  0  0  3  0 53  0  0  0  0  0  0  0  2 23  0  0  0  1  0  0]
 [ 0  0  1  0  1  1  0  0  1  0  0  0  0  0  0  2  0  0  0  1  0  0  0  0  0  1 11  1  0  0]
 [ 0  0  0  0  1  0  0  2  0  0  0  0  0  0  0  0 92  0  0  0  2  0  0  1  0  0  0  0  1  1]
 [ 5  0  1  0  0  0  0  0  2  0  0  0  0  0  0  0  0 74 17  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 19  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  1  0  0  0  0  0  0  1  0  0  2  0  0  0  9  1  0  0  0  0  0  5  0  0  0]
 [ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 14  0  0  0  0  0  0  2  0  2]
 [ 2  0  1  0  6  1  0  0  0  1  0  3  0  0  0  0  0  0  0  0  0 84  2  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  2  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 88  3  0  0  4  0  0  1]
 [ 0  0  0  0  2  0  0  0  1  0  0  0  1  0 13  1  1  0  0  0  0  0  0 65  0  0  0  0  0  2]
 [ 0  0  0  0  4  2  0  0  0  0  0  0  0  0  0  1  0  0  1  2  0  0  0  0  3  1  6  0  0  0]
 [ 3  1  3  3  7  2  2  3  7  0  0  1  1  0  0  1  1  0  3  0  3  1  4  0  0 49  1  1  0  3]
 [ 1  0  0  1  4  6  0  2  2  0  0  2  0  1  0  6  3  0  2  8  0  0  0  0  3  2 57  0  0  0]
 [ 1  0  2  1  3  0  0  0  0  1  0  0  0  1  0  0  3  0  0  0  2  0  0  1  0  1  0  2  0  2]
 [ 1  0  1  1  2  1  0  0  3  0  0  0  0  0  0  3  0  0  0  1  8  2  0  0  0  3  3  0 69  2]
 [ 3  0  0  0  0  0  1  0  4  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  2  7]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.80      0.94      0.87       100
     bathtub       0.95      0.72      0.82        50
         bed       0.76      0.93      0.83       100
       bench       0.41      0.55      0.47        20
   bookshelf       0.69      0.87      0.77       100
      bottle       0.76      0.72      0.74       100
        bowl       0.44      0.20      0.28        20
         car       0.87      0.77      0.81       100
       chair       0.76      0.91      0.83       100
        cone       0.73      0.55      0.63        20
         cup       1.00      0.05      0.10        20
     curtain       0.45      0.45      0.45        20
        desk       0.91      0.70      0.79        86
        door       0.59      0.80      0.68        20
     dresser       0.77      0.62      0.68        86
  flower_pot       0.08      0.10      0.09        20
   glass_box       0.81      0.92      0.86       100
      guitar       1.00      0.74      0.85       100
    keyboard       0.30      0.95      0.45        20
        lamp       0.33      0.45      0.38        20
      laptop       0.37      0.70      0.48        20
      mantel       0.95      0.84      0.89       100
     monitor       0.86      0.88      0.87       100
 night_stand       0.64      0.76      0.70        86
      person       0.50      0.15      0.23        20
       piano       0.74      0.49      0.59       100
       plant       0.53      0.57      0.55       100
       radio       0.17      0.10      0.12        20
  range_hood       0.95      0.69      0.80       100
        sink       0.25      0.35      0.29        20

    accuracy                           0.72      1868
   macro avg       0.65      0.62      0.60      1868
weighted avg       0.75      0.72      0.72      1868


Test accuracy for 40 classes width res 24: 0.6624797582626343
Confusion Matrix
[[92  0  2  0  0  0  0  0  5  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0 36  7  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  2  0  0  2  1  0  1  0  0  0]
 [ 0  2 86  0  0  0  0  1  0  0  0  0  0  0  0  0  0  3  1  0  0  0  0  0  0  0  0  0  0  0  2  0  0  0  4  0  1  0  0  0]
 [ 0  0  0 10  0  0  0  1  1  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  0  0  1  0  0  1  0  0  4  0  0  0]
 [ 0  0  0  0 85  2  0  0  0  2  0  2  0  3  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  3  0  0]
 [ 0  0  0  0  1 69  0  0  4  0  0  0  0  0  1  0  0  0  0  1  0  0  0  0  1  0  2  0  0  0  0  1  0  0  0  0  0 16  0  4]
 [ 1  0  0  0  0  0  5  2  3  0  0  0  0  0  0  1  2  2  0  0  0  0  2  0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0]
 [ 4  0  1  1  0  0  0 77  1  0  0  0  0  0  0  0  0  2  0  0  0  2  0  0  0  1  0  0  0  0  1  0  0  0  3  0  7  0  0  0]
 [ 0  0  2  0  0  0  0  0 86  1  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  1  1  1  0  0  1  0  0  4  0  1  0  0]
 [ 1  0  0  0  0  1  0  0  0  9  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  4  0  0  2  0  1]
 [ 0  0  0  0  0  1  1  0  1  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  1 13  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0 11  0  4  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0 61  0  4  0  0  0  0  0  0  0  2  3  0  0  0  1  0  0  7  0  0  5  0  1  1  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  2  0 16  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0]
 [ 0  1  0  0  1  0  0  0  0  1  0  0  3  0 64  0  0  0  0  1  0  0  2 10  0  0  0  0  0  0  0  0  0  1  0  1  0  1  0  0]
 [ 0  0  0  1  1  0  0  0  2  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  1  0  3  0  0  0  0  1  0  0  0  0  0 10  0  0]
 [ 0  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0 87  0  0  0  0  0  0  2  1  1  0  1  0  1  0  0  0  1  0  0  3  1  0  0]
 [ 6  0  3  1  0  0  0  1  5  0  0  0  0  0  0  0  0 69 13  0  0  0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0 17  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  8  0  1  0  0  0  0  7  0  0  0  0  0  0  0  0  0  0  1  0  0]
 [ 0  0  2  0  0  1  0  0  1  0  0  0  0  0  0  0  0  1  0  0 14  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  7  0  0  0  1  0  0  0  0  0  0  0  2  0  0  0  0 81  2  1  0  0  0  0  0  1  0  0  0  1  0  1  2  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  2  0  4  1  0  0  0  0  0  0 83  1  0  2  1  0  0  0  1  0  0  0  1  2  0  0  1  0]
 [ 0  0  0  1  2  0  0  0  0  1  0  0  1  0 17  1  2  0  0  0  0  0  0 55  0  0  0  0  0  0  0  0  1  5  0  0  0  0  0  0]
 [ 0  0  0  0  5  0  0  0  2  0  0  1  0  1  0  0  0  0  0  1  0  0  0  0  7  0  3  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  3  1  7  1  0  3  8  1  0  0  1  0  0  0  4  1  1  1  1  0  4  0  0 38  3  1  1  4  0  1  0  2  2  0  5  6  0  0]
 [ 2  0  0  0  5  0  0  0  5  0  0  1  0  1  0  8  1  0  1  5  0  0  0  0  3  4 40  0  0  0  0  0  2  0  0  0  1 16  3  2]
 [ 0  0  2  2  2  0  0  0  1  0  0  0  1  0  0  0  2  0  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0  2  4  0  1  0]
 [ 1  0  1  0  3  6  0  0  1  3  0  0  0  0  0  0  0  0  0  0  1 13  0  0  0  1  1  0 59  1  0  1  0  0  1  0  2  3  1  1]
 [ 3  0  1  0  0  0  0  0  1  0  1  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  6  1  0  0  1  1  1  2  0  0  0]
 [ 0  0  1  1  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0 94  0  0  0  1  1  0  0  0  0]
 [ 0  0  0  1  1  0  0  0  2  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  2  0  3  1  0  2  0  1  0  0  1  1  0  2  1  1]
 [ 0  0  0  0  2  2  0  0  0  0  0  0  0  1  0  0  0  0  0  1  1  1  0  0  0  0  4  0  1  0  0  1  2  1  0  0  1  2  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0 32  0  1  0  0  0  0  1  0  3  1  4  0  1  0  0  0  0  0  0  0 52  2  0  2  0  0  0]
 [ 1  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  0  0  0  0  1  0  0  0  1  0  0  0  3  0  0  0  0  8  0  2  0  0  0]
 [ 0  0  0  0  0  0  0  0  4  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0 94  1  0  0  0]
 [ 2  2  1  6  7  1  0  1  2  1  0  0  4  0  1  0  4  2  2  0  0  0  1  0  0  4  0  0  0  2  2  0  0  1  0  1 51  2  0  0]
 [ 0  0  1  1  3  9  1  0  2  1  4  0  2  0  0  1  0  0  0  1  0  1  1  0  3  1  4  0  0  0  2  0  0  0  0  1  0 57  2  2]
 [ 0  0  0  0  6  1  0  0  4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  2  0  0  0  0  0  0  0  0  0  0  2  4  0]
 [ 0  0  0  1  2  4  2  0  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  1  0  0  0  2  2  2  1  0]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.81      0.92      0.86       100
     bathtub       0.88      0.72      0.79        50
         bed       0.74      0.86      0.79       100
       bench       0.37      0.50      0.43        20
   bookshelf       0.59      0.85      0.70       100
      bottle       0.70      0.69      0.69       100
        bowl       0.56      0.25      0.34        20
         car       0.89      0.77      0.82       100
       chair       0.60      0.86      0.70       100
        cone       0.45      0.45      0.45        20
         cup       0.00      0.00      0.00        20
     curtain       0.61      0.55      0.58        20
        desk       0.56      0.71      0.63        86
        door       0.62      0.80      0.70        20
     dresser       0.69      0.74      0.72        86
  flower_pot       0.07      0.05      0.06        20
   glass_box       0.80      0.87      0.83       100
      guitar       0.84      0.69      0.76       100
    keyboard       0.47      0.85      0.61        20
        lamp       0.38      0.40      0.39        20
      laptop       0.74      0.70      0.72        20
      mantel       0.77      0.81      0.79       100
     monitor       0.81      0.83      0.82       100
 night_stand       0.71      0.64      0.67        86
      person       0.39      0.35      0.37        20
       piano       0.66      0.38      0.48       100
       plant       0.52      0.40      0.45       100
       radio       0.00      0.00      0.00        20
  range_hood       0.94      0.59      0.72       100
        sink       0.26      0.30      0.28        20
        sofa       0.82      0.94      0.88       100
      stairs       0.12      0.05      0.07        20
       stool       0.33      0.10      0.15        20
       table       0.71      0.52      0.60       100
        tent       0.27      0.40      0.32        20
      toilet       0.84      0.94      0.89       100
    tv_stand       0.54      0.51      0.52       100
        vase       0.40      0.57      0.47       100
    wardrobe       0.27      0.20      0.23        20
        xbox       0.00      0.00      0.00        20

    accuracy                           0.66      2468
   macro avg       0.54      0.54      0.53      2468
weighted avg       0.66      0.66      0.65      2468

================================================================================================================
model = keras.Sequential([
    keras.layers.Conv3D(
            res, 
            kernel_size=(3), 
            activation='relu', 
            kernel_initializer='he_uniform', 
            data_format="channels_last",
            input_shape=(res, res, res, num_classes)
        ),        
    keras.layers.MaxPooling3D(pool_size=(2, 2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(res/2, activation='relu'),
    keras.layers.Dense(num_classes, activation='softmax')
])

learning_rate = 0.0001

model.compile(optimizer=keras.optimizers.Adam(lr=learning_rate),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

Test accuracy for 10 classes width res 24: 0.9098591804504395
Confusion Matrix
[[98  0  2  0  0  0  0  0  0  0]
 [ 0 37  5  1  0  0  3  4  0  0]
 [ 0  2 96  1  0  0  0  1  0  0]
 [ 3  0  1 15  1  0  0  0  0  0]
 [ 0  0  0  1 94  4  0  0  1  0]
 [ 5  0  0  0  1 92  0  0  1  1]
 [ 4  0  0  2  0  0 11  3  0  0]
 [ 7  0  2  2  0  0  0 89  0  0]
 [ 1  0  0  1  0  0  0  0 98  0]
 [ 0  0  0  0  0  3  0  1  0 16]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.83      0.98      0.90       100
     bathtub       0.95      0.74      0.83        50
         bed       0.91      0.96      0.93       100
       bench       0.65      0.75      0.70        20
   bookshelf       0.98      0.94      0.96       100
      bottle       0.93      0.92      0.92       100
        bowl       0.79      0.55      0.65        20
         car       0.91      0.89      0.90       100
       chair       0.98      0.98      0.98       100
        cone       0.94      0.80      0.86        20

    accuracy                           0.91       710
   macro avg       0.89      0.85      0.86       710
weighted avg       0.91      0.91      0.91       710

Test accuracy for 20 classes width res 24: 0.7845258116722107
Confusion Matrix
[[95  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  0  3  0  0]
 [ 0 41  2  1  0  1  0  4  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  1 93  1  0  0  0  2  0  0  0  0  0  0  0  0  0  0  3  0]
 [ 2  0  0 12  1  1  0  2  0  0  0  0  1  0  0  0  0  1  0  0]
 [ 0  0  0  1 87  3  0  0  1  0  0  0  0  0  0  1  1  0  0  6]
 [ 3  0  0  0  2 70  0  0  0  0  0  0  0  0  6  4  1  5  0  9]
 [ 0  1  2  0  1  0  0  4  1  0  0  3  0  1  0  0  3  4  0  0]
 [ 0  1  2  3  4  0  0 80  0  0  0  0  0  0  0  1  2  6  1  0]
 [ 2  0  0  1  1  0  0  0 92  1  2  0  0  0  0  0  0  1  0  0]
 [ 2  0  0  0  1  3  0  0  0 14  0  0  0  0  0  0  0  0  0  0]
 [ 1  0  2  0  1  0  0  0  0  0  3  0  1  0  0  4  6  1  0  1]
 [ 0  0  1  0  0  0  0  0  2  0  0  0  0  4  1  0  0  0  0 12]
 [ 0  2  1  0  0  1  0  2  0  0  1  0 74  0  4  0  0  0  0  1]
 [ 0  1  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0 17]
 [ 0  3  0  0  0  0  0  2  0  0  0  0  1  0 76  2  1  0  0  1]
 [ 1  0  0  0  8  0  0  0  1  1  1  0  0  0  2  4  1  0  0  1]
 [ 0  2  0  0  1  0  0  1  0  0  0  0  0  0  0  0 95  0  0  1]
 [13  0  1  5  0  0  0  0  0  0  0  0  1  0  0  0  0 78  2  0]
 [ 0  0  1  1  0  0  0  0  1  0  0  0  0  0  0  0  0  1 16  0]
 [ 1  0  0  0  4  1  0  0  0  0  0  0  1  0  1  0  0  0  0 12]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.79      0.95      0.86       100
     bathtub       0.79      0.82      0.80        50
         bed       0.89      0.93      0.91       100
       bench       0.48      0.60      0.53        20
   bookshelf       0.78      0.87      0.82       100
      bottle       0.86      0.70      0.77       100
        bowl       0.00      0.00      0.00        20
         car       0.82      0.80      0.81       100
       chair       0.94      0.92      0.93       100
        cone       0.78      0.70      0.74        20
         cup       0.43      0.15      0.22        20
     curtain       0.00      0.00      0.00        20
        desk       0.94      0.86      0.90        86
        door       0.17      0.05      0.08        20
     dresser       0.84      0.88      0.86        86
  flower_pot       0.25      0.20      0.22        20
   glass_box       0.86      0.95      0.90       100
      guitar       0.78      0.78      0.78       100
    keyboard       0.73      0.80      0.76        20
        lamp       0.20      0.60      0.30        20

    accuracy                           0.78      1202
   macro avg       0.62      0.63      0.61      1202
weighted avg       0.77      0.78      0.77      1202


Test accuracy for 30 classes width res 24: 0.6905781626701355
Confusion Matrix
[[91  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  6  0  0  0  0  0  0  1  1  0  0  0  0]
 [ 0  6 12  1  0  0  0  2  1  1  1  0  0  0  0  0  5  0  0  0  0  0  0  0  0 15  0  6  0  0]
 [ 0  0 93  1  0  0  0  0  0  0  0  0  0  0  0  1  2  1  0  0  0  0  0  1  0  1  0  0  0  0]
 [ 4  0  1  8  0  0  0  0  2  0  0  0  0  0  0  0  0  2  0  0  0  0  0  1  0  0  0  0  0  2]
 [ 0  0  0  0 89  3  0  0  0  0  0  1  0  1  0  0  0  0  0  1  0  3  1  0  0  1  0  0  0  0]
 [ 0  0  0  0  3 75  0  0  1  0  0  0  0  0  0  0  0  5  0  8  0  2  0  0  0  0  5  1  0  0]
 [ 0  0  0  3  0  0  5  1  0  0  0  0  0  0  0  0  2  4  1  0  0  0  0  0  0  3  1  0  0  0]
 [ 3  0  0  6  0  0  0 85  1  0  0  0  0  0  0  1  0  1  1  0  0  0  0  0  0  0  1  1  0  0]
 [ 0  0  0  0  0  0  0  0 95  0  0  1  0  1  0  0  0  1  0  0  0  0  0  0  0  0  1  0  0  1]
 [ 2  0  0  0  1  1  0  2  0 11  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  2  0  0  0]
 [ 0  1  1  0  0  3  1  0  0  0  3  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  7  1  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  9  0  4  0  0  0  0  0  3  0  0  2  0  0  0  0  0  0  1]
 [ 0  0  6  0  0  0  0  0  0  0  0  2 60  0  4  1  0  0  0  0  1  0  1  6  0  0  1  4  0  0]
 [ 0  0  0  0  2  0  0  0  0  1  0  5  0 12  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  2  0 60  0  0  0  0  1  0  1  1 20  0  0  0  0  0  0]
 [ 1  0  0  0  1  2  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  0  1  0  0 11  1  1  0]
 [ 0  1  0  0  0  0  0  7  0  0  1  0  0  1  1  0 74  0  0  0  0  0  0  0  0 11  1  2  0  1]
 [ 6  0  0  4  0  0  0  0  3  0  0  0  0  0  0  0  0 82  4  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  2 17  0  0  0  0  0  0  0  0  0  0  0]
 [ 1  0  0  0  2  0  0  0  0  0  1  0  0  0  1  0  0  0  0  8  0  0  0  0  0  0  7  0  0  0]
 [ 0  0  0  2  0  0  0  0  3  0  0  0  0  0  0  0  0  2  0  0  9  0  1  0  0  0  0  0  0  3]
 [ 0  0  1  0 10  0  0  0  1  0  0  1  0  0  1  0  0  0  0  0  0 79  3  0  1  2  0  0  0  1]
 [ 0  0  0  0  1  0  0  0  2  0  0  0  2  0  3  2  0  0  0  0  0  0 90  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  8  0 11  0  0  0  0  0  0  2  0 63  0  0  0  0  1  0]
 [ 0  0  0  0  4  0  0  0  1  0  0  3  0  1  0  0  0  1  0  5  0  0  0  0  0  0  5  0  0  0]
 [ 1  0  3  4  8  0  0  1  4  1  0  0  1  0  0  6  1  3  0  0  0  3  2  1  0 48  7  1  1  4]
 [ 1  0  0  1  3  8  0  3  3  3  0  3  0  0  0  2  0  1  1  2  0  1  1  0  0  2 65  0  0  0]
 [ 0  0  1  1  8  0  0  0  0  0  0  0  1  0  1  1  3  0  0  0  1  0  0  0  0  2  0  1  0  0]
 [ 1  0  0  2 11  1  0  1  1  0  0  0  0  0  1  1  0  0  0  1  2 15  2  0  0  1 10  0 50  0]
 [ 3  0  0  3  1  0  0  0  1  0  0  0  0  0  1  2  0  0  0  0  2  0  1  0  0  3  0  0  1  2]]
Classification Report
              precision    recall  f1-score   support

    airplane       0.80      0.91      0.85       100
     bathtub       0.75      0.12      0.21        50
         bed       0.79      0.93      0.85       100
       bench       0.22      0.40      0.29        20
   bookshelf       0.61      0.89      0.73       100
      bottle       0.80      0.75      0.77       100
        bowl       0.83      0.25      0.38        20
         car       0.83      0.85      0.84       100
       chair       0.78      0.95      0.86       100
        cone       0.61      0.55      0.58        20
         cup       0.50      0.15      0.23        20
     curtain       0.35      0.45      0.39        20
        desk       0.81      0.70      0.75        86
        door       0.60      0.60      0.60        20
     dresser       0.71      0.70      0.70        86
  flower_pot       0.00      0.00      0.00        20
   glass_box       0.85      0.74      0.79       100
      guitar       0.73      0.82      0.77       100
    keyboard       0.71      0.85      0.77        20
        lamp       0.28      0.40      0.33        20
      laptop       0.56      0.45      0.50        20
      mantel       0.75      0.79      0.77       100
     monitor       0.86      0.90      0.88       100
 night_stand       0.68      0.73      0.70        86
      person       0.00      0.00      0.00        20
       piano       0.53      0.48      0.50       100
       plant       0.52      0.65      0.58       100
       radio       0.06      0.05      0.05        20
  range_hood       0.93      0.50      0.65       100
        sink       0.13      0.10      0.11        20

    accuracy                           0.69      1868
   macro avg       0.59      0.56      0.55      1868
weighted avg       0.70      0.69      0.68      1868


